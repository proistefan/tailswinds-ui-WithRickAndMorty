{"ast":null,"code":"var __jsx = React.createElement;\nimport { withApollo } from '../../apollo/apollo.js';\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Card from \"../../components/Card\";\nimport apolloClient from \"../../apolloClient\";\nimport { ALL_EPISODE_IDS, GET_EPISODE } from \"../../queries/episodeQueries\";\nexport async function getStaticPaths(ctx) {\n  const client = await apolloClient(ctx);\n  const response = await client.query({\n    query: ALL_EPISODE_IDS\n  });\n  const {\n    count\n  } = response.data.episodes.info;\n  const ids = [...Array(count).keys()];\n  const paths = ids.map(id => ({\n    params: {\n      id: `${id + 1}`\n    }\n  }));\n  return {\n    paths,\n    fallback: true\n  };\n}\nexport async function getStaticProps({\n  params\n}, ctx) {\n  const client = await apolloClient(ctx);\n  const response = await client.query({\n    query: GET_EPISODE,\n    variables: {\n      id: `${params.id}`\n    }\n  });\n  const {\n    episode\n  } = response.data;\n  return {\n    props: {\n      episode,\n      loading: response.loading,\n      error: !response.error ? null : response.error\n    }\n  };\n}\n\nconst episode = ({\n  episode,\n  loading,\n  error\n}) => {\n  const router = useRouter();\n  if (loading) return __jsx(\"div\", {\n    className: \"flex items-center justify-center title\"\n  }, \"...Loading\");\n  if (error) return __jsx(\"div\", null, Error.toString());\n\n  if (router.isFallback) {\n    return __jsx(\"div\", {\n      className: \"flex items-center justify-center title\"\n    }, \"Loading...\");\n  }\n\n  const handleClick = e => {\n    e.preventDefault();\n    router.push('/');\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"Hero font-mono text-lg py-2 bg-blue-500\"\n  }, __jsx(\"button\", {\n    onClick: handleClick,\n    className: \"text-black bg-white hover:bg-black hover:text-white font-mono py-2 px-4 border border-black rounded m-2\"\n  }, \"Home\"), __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"title\"\n  }, \"Episode \", router.query.id), __jsx(\"div\", {\n    className: \"title\"\n  }, episode.name), __jsx(\"div\", {\n    className: \"flex justify-center\"\n  }, episode.air_date), __jsx(\"br\", null), __jsx(\"hr\", {\n    style: {\n      marginRight: '20%',\n      marginLeft: '20%',\n      border: '1px solid black',\n      marginBottom: '2rem'\n    }\n  }), __jsx(\"br\", null))), __jsx(\"hr\", null), __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"font-mono title\"\n  }, \"Cast\"), __jsx(\"div\", {\n    className: \"sm:flex sm:flex-col sm:justify-center sm:content-center sm:items-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\"\n  }, episode.characters.map(data => {\n    return __jsx(Card, {\n      heading: data.name,\n      text: data.status,\n      img: loading ? '/rickandmorty.jpg' : data.image,\n      key: data.id,\n      id: data.id\n    });\n  }))));\n};\n\nexport default withApollo({\n  ssr: false\n})(episode);","map":null,"metadata":{},"sourceType":"module"}