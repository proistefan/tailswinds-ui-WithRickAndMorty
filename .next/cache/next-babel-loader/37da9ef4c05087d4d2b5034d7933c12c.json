{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/mbp/WebstormProjects/tailswinds-ui/pages/characters/[character].js\";\nvar __jsx = React.createElement;\nimport { withApollo } from '../../apollo/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from 'react';\nimport { GET_CHARACTER } from '../../queries/characterQueries';\nimport { useRouter } from 'next/router';\n\nfunction character() {\n  var router, _await$useQuery, data, loading, error, character;\n\n  return _regeneratorRuntime.async(function character$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          router = useRouter();\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(console.log(router.query, ' Router Query'));\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(useQuery(GET_CHARACTER, {\n            variables: {\n              id: \"15\"\n            }\n          }));\n\n        case 5:\n          _await$useQuery = _context.sent;\n          data = _await$useQuery.data;\n          loading = _await$useQuery.loading;\n          error = _await$useQuery.error;\n\n          if (!loading) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"return\", __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 18,\n              columnNumber: 23\n            }\n          }, \"...Loading\"));\n\n        case 11:\n          if (!error) {\n            _context.next = 13;\n            break;\n          }\n\n          return _context.abrupt(\"return\", __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 19,\n              columnNumber: 21\n            }\n          }, error));\n\n        case 13:\n          character = data.character[0] || {};\n          console.log(data);\n          return _context.abrupt(\"return\", __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 5\n            }\n          }, character.name));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, this, null, Promise);\n}\n\nexport default withApollo({\n  ssr: false\n})(character);","map":{"version":3,"sources":["/Users/mbp/WebstormProjects/tailswinds-ui/pages/characters/[character].js"],"names":["withApollo","useQuery","React","GET_CHARACTER","useRouter","character","router","console","log","query","variables","id","data","loading","error","name","ssr"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,qBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,SAAeC,SAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEQC,UAAAA,MAFR,GAEiBF,SAAS,EAF1B;AAAA;AAAA,2CAIQG,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,KAAnB,EAA0B,eAA1B,CAJR;;AAAA;AAAA;AAAA,2CAMyCR,QAAQ,CAACE,aAAD,EAAgB;AAC7DO,YAAAA,SAAS,EAAE;AAACC,cAAAA,EAAE,EAAE;AAAL;AADkD,WAAhB,CANjD;;AAAA;AAAA;AAMUC,UAAAA,IANV,mBAMUA,IANV;AAMgBC,UAAAA,OANhB,mBAMgBA,OANhB;AAMyBC,UAAAA,KANzB,mBAMyBA,KANzB;;AAAA,eAWMD,OAXN;AAAA;AAAA;AAAA;;AAAA,2CAWsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAXtB;;AAAA;AAAA,eAYMC,KAZN;AAAA;AAAA;AAAA;;AAAA,2CAYoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAMA,KAAN,CAZpB;;AAAA;AAcQT,UAAAA,SAdR,GAcoBO,IAAI,CAACP,SAAL,CAAe,CAAf,KAAqB,EAdzC;AAgBEE,UAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AAhBF,2CAmBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGP,SAAS,CAACU,IADb,CAnBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BA,eAAef,UAAU,CAAC;AAACgB,EAAAA,GAAG,EAAE;AAAN,CAAD,CAAV,CAAyBX,SAAzB,CAAf","sourcesContent":["import { withApollo } from '../../apollo/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from 'react';\nimport { GET_CHARACTER } from '../../queries/characterQueries';\nimport { useRouter } from 'next/router';\n\nasync function character() {\n  \n  const router = useRouter();\n\n  await console.log(router.query, ' Router Query')\n\n  const { data, loading, error } = await useQuery(GET_CHARACTER, {\n    variables: {id: \"15\"}\n  });\n\n\n  if (loading) return <div>...Loading</div>;\n  if (error) return <div>{error}</div>\n\n  const character = data.character[0] || {};\n\n  console.log(data)\n\n  return (\n    <div>\n      {character.name}\n    </div>\n  )\n\n}\n\nexport default withApollo({ssr: false})(character)\n\n"]},"metadata":{},"sourceType":"module"}