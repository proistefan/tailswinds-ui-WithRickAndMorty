{"ast":null,"code":"var __jsx = React.createElement;\nimport Card from \"../components/Card\";\nimport { withApollo } from '../apollo/apollo';\nimport React, { useEffect, useState } from \"react\";\nimport _, { debounce } from 'lodash';\nimport apolloClient from \"../apolloClient\";\nimport { ALL_CHARACTERS } from \"../queries/characterQueries\";\n\n// For GraphQL API - haven't figured out how to stream results\n// export async function getStaticProps(ctx) {\n//   const client = await apolloClient(ctx)\n//   const response = await client.query({\n//     query: ALL_CHARACTERS\n//   })\n//\n//   return {\n//     props: {\n//       characters: response.data.characters.results,\n//       loading: response.loading,\n//       error: !response.error ? null : response.error\n//     },\n//   }\n// }\nvar IndexPage = function IndexPage(_ref) {\n  var characters = _ref.characters;\n\n  var _useState = useState(characters),\n      chars = _useState[0],\n      setChars = _useState[1];\n\n  var _useState2 = useState(''),\n      lookup = _useState2[0],\n      setLookup = _useState2[1];\n\n  useEffect(function () {\n    var res = _.filter(chars, function (_char) {\n      return _char.name.toLowerCase().includes(lookup.toLowerCase());\n    }); // const results = chars.filter(char => char.name.toLowerCase().includes(lookup.toLowerCase()))\n\n\n    setChars(res);\n  }, [lookup]);\n\n  var handleChange = function handleChange(e) {\n    debounce(function (e) {\n      return setLookup(e.target.value);\n    }, 100);\n    setLookup(e.target.value);\n\n    if (e.target.value === '') {\n      setChars(characters);\n    }\n  };\n\n  var handleClick = function handleClick(e) {\n    e.preventDefault();\n    setChars(characters);\n  }; // if (error) return <h1 className=\"flex justify-center\">Error</h1>;\n  // if (loading) return <h1 className=\"flex items-center justify-center title\">... Loading</h1>\n\n\n  return __jsx(\"div\", {\n    className: \"bg-gray-200 h-auto w-auto\"\n  }, __jsx(\"div\", {\n    className: \"shadow-lg hero bg-blue-500 font-mono text-white\"\n  }, __jsx(\"h1\", {\n    className: \"title\"\n  }, \"Rick & Morty\"), __jsx(\"h3\", {\n    className: \"flex justify-center\"\n  }, \" with Next.js, Apollo GraphQL\"), __jsx(\"h3\", {\n    className: \"flex justify-center\"\n  }, \"and Tailwind CSS\"), __jsx(\"h3\", {\n    className: \"flex justify-center underline\"\n  }, __jsx(\"a\", {\n    href: 'https://github.com/MuddyBootsCode/tailswinds-ui'\n  }, \"Git Repo here\"))), __jsx(\"br\", null), __jsx(\"div\", {\n    className: \"flex justify-center\"\n  }, __jsx(\"input\", {\n    className: \"shadow appearance-none border rounded w-1/2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    id: \"username\",\n    type: \"text\",\n    placeholder: \"Character Search\",\n    value: lookup,\n    onChange: handleChange\n  }), __jsx(\"button\", {\n    className: \"text-black bg-white hover:bg-black hover:text-white font-mono py-2 px-4 border border-black rounded m-2\",\n    onClick: handleClick\n  }, \"Reset Search\")), __jsx(\"div\", {\n    className: \"sm:flex sm:flex-col sm:justify-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\"\n  }, chars.map(function (data) {\n    return __jsx(Card, {\n      heading: data.name,\n      text: data.status,\n      img: !data.image ? '/rickandmorty.jpg' : data.image,\n      key: data.id,\n      id: data.id\n    });\n  })));\n};\n\nexport var __N_SSG = true;\nexport default withApollo({\n  ssr: false\n})(IndexPage);","map":null,"metadata":{},"sourceType":"module"}