{"ast":null,"code":"var _jsxFileName = \"/Users/mbp/WebstormProjects/tailswinds-ui/pages/index.js\";\nvar __jsx = React.createElement;\nimport Card from \"../components/Card\";\nimport { withApollo } from '../apollo/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from \"react\";\nimport gql from 'graphql-tag';\nimport apolloClient from \"../apolloClient\";\nconst ALL_CHARACTERS = gql`\n    query{\n        characters{\n            results{\n                id\n                name\n                image\n                status\n            }\n        }\n    }\n`;\nexport async function getStaticProps(ctx) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  console.log(ctx);\n  const client = await apolloClient(ctx);\n  const response = await client.query({\n    query: ALL_CHARACTERS\n  });\n  console.log(response, ' inside async function');\n  return {\n    props: {\n      characters: client.cache.extract()\n    }\n  };\n}\n\nconst IndexPage = props => {\n  const {\n    data,\n    loading,\n    error\n  } = props; // const { data, loading, error } = useQuery(ALL_CHARACTERS);\n\n  if (error) return __jsx(\"h1\", {\n    className: \"flex justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return __jsx(\"h1\", {\n    className: \"flex items-center justify-center title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }, \"... Loading\");\n  console.log(props, ' inside of index page function');\n  return __jsx(\"div\", {\n    className: \"bg-gray-200 h-auto w-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"shadow-lg hero bg-blue-500 font-mono text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Rick & Morty\"), __jsx(\"h3\", {\n    className: \"flex justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \" with Next.js, Apollo GraphQL\"), __jsx(\"h3\", {\n    className: \"flex justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"and Tailwind CSS\"), __jsx(\"h3\", {\n    className: \"flex justify-center underline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    href: 'https://github.com/MuddyBootsCode/tailswinds-ui',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Git Repo here\"))), __jsx(\"div\", {\n    className: \"sm:flex sm:flex-col sm:justify-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, data.characters.results.map(data => {\n    return __jsx(Card, {\n      heading: data.name,\n      text: data.status,\n      img: loading ? '/rickandmorty.jpg' : data.image,\n      key: data.id,\n      id: data.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\nexport default withApollo({\n  ssr: false\n})(IndexPage);","map":{"version":3,"sources":["/Users/mbp/WebstormProjects/tailswinds-ui/pages/index.js"],"names":["Card","withApollo","useQuery","React","gql","apolloClient","ALL_CHARACTERS","getStaticProps","ctx","console","log","client","response","query","props","characters","cache","extract","IndexPage","data","loading","error","results","map","name","status","image","id","ssr"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,MAAMC,cAAc,GAAGF,GAAI;;;;;;;;;;;CAA3B;AAaA,OAAO,eAAeG,cAAf,CAA8BC,GAA9B,EAAmC;AACxC;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,QAAMG,MAAM,GAAG,MAAMN,YAAY,CAACG,GAAD,CAAjC;AACA,QAAMI,QAAQ,GAAG,MAAMD,MAAM,CAACE,KAAP,CAAa;AAClCA,IAAAA,KAAK,EAAEP;AAD2B,GAAb,CAAvB;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ,EAAsB,wBAAtB;AAEA,SAAO;AACLE,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEJ,MAAM,CAACK,KAAP,CAAaC,OAAb;AADP;AADF,GAAP;AAKD;;AAED,MAAMC,SAAS,GAAIJ,KAAD,IAAW;AAC3B,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BP,KAAjC,CAD2B,CAE3B;;AACA,MAAIO,KAAJ,EAAW,OAAO;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAI,IAAA,SAAS,EAAC,wCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AAEbX,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ,EAAmB,gCAAnB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,iDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFF,EAGE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAI,IAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAE,iDAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAJF,CADF,EAYI;AAAK,IAAA,SAAS,EAAC,qFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,IAAI,CAACJ,UAAL,CAAgBO,OAAhB,CAAwBC,GAAxB,CAA6BJ,IAAD,IAAU;AACrC,WACE,MAAC,IAAD;AACE,MAAA,OAAO,EAAEA,IAAI,CAACK,IADhB;AAEE,MAAA,IAAI,EAAEL,IAAI,CAACM,MAFb;AAGE,MAAA,GAAG,EAAEL,OAAO,GAAG,mBAAH,GAAyBD,IAAI,CAACO,KAH5C;AAIE,MAAA,GAAG,EAAEP,IAAI,CAACQ,EAJZ;AAKE,MAAA,EAAE,EAAER,IAAI,CAACQ,EALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVA,CADH,CAZJ,CADF;AA4BD,CApCD;;AAsCA,eAAe1B,UAAU,CAAC;AAAE2B,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BV,SAA3B,CAAf","sourcesContent":["import Card from \"../components/Card\";\nimport { withApollo } from '../apollo/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from \"react\";\nimport gql from 'graphql-tag';\nimport apolloClient from \"../apolloClient\";\n\nconst ALL_CHARACTERS = gql`\n    query{\n        characters{\n            results{\n                id\n                name\n                image\n                status\n            }\n        }\n    }\n`;\n\nexport async function getStaticProps(ctx) {\n  // Call an external API endpoint to get posts.\n  // You can use any data fetching library\n  console.log(ctx)\n  const client = await apolloClient(ctx)\n  const response = await client.query({\n    query: ALL_CHARACTERS\n  })\n\n  console.log(response, ' inside async function')\n\n  return {\n    props: {\n      characters: client.cache.extract(),\n    },\n  }\n}\n\nconst IndexPage = (props) => {\n  const { data, loading, error } = props;\n  // const { data, loading, error } = useQuery(ALL_CHARACTERS);\n  if (error) return <h1 className=\"flex justify-center\">Error</h1>;\n  if (loading) return <h1 className=\"flex items-center justify-center title\">... Loading</h1>\n\n  console.log(props, ' inside of index page function')\n\n  return (\n    <div className=\"bg-gray-200 h-auto w-auto\">\n      <div className=\"shadow-lg hero bg-blue-500 font-mono text-white\">\n        <h1 className=\"title\">Rick & Morty</h1>\n        <h3 className=\"flex justify-center\"> with Next.js, Apollo GraphQL</h3>\n        <h3 className=\"flex justify-center\">and Tailwind CSS</h3>\n        <h3 className=\"flex justify-center underline\">\n          <a href={'https://github.com/MuddyBootsCode/tailswinds-ui'}>\n            Git Repo here\n          </a>\n        </h3>\n\n      </div>\n        <div className=\"sm:flex sm:flex-col sm:justify-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\">\n          {data.characters.results.map((data) => {\n            return (\n              <Card\n                heading={data.name}\n                text={data.status}\n                img={loading ? '/rickandmorty.jpg' : data.image}\n                key={data.id}\n                id={data.id}\n              />\n            )\n          })}\n        </div>\n    </div>\n  )\n};\n\nexport default withApollo({ ssr: false })(IndexPage);\n"]},"metadata":{},"sourceType":"module"}