{"ast":null,"code":"var _jsxFileName = \"/Users/mbp/WebstormProjects/tailswinds-ui/pages/episodes/[id].js\";\nvar __jsx = React.createElement;\nimport { withApollo } from '../../apollo/apollo.js';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Card from \"../../components/Card\";\nimport apolloClient from \"../../apolloClient\";\nimport { ALL_CHARACTER_IDS, GET_CHARACTER } from \"../../queries/characterQueries\";\nimport { ALL_EPISODE_IDS, GET_EPISODE } from \"../../queries/episodeQueries\";\nexport async function getStaticPaths(ctx) {\n  const client = await apolloClient(ctx);\n  const response = await client.query({\n    query: ALL_EPISODE_IDS\n  });\n  const {\n    results\n  } = response.data.episodes;\n  const paths = results.map(post => ({\n    params: {\n      id: post.id\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}, ctx) {\n  const client = await apolloClient(ctx);\n  const response = await client.query({\n    query: GET_EPISODE,\n    variables: {\n      id: `${params.id}`\n    }\n  });\n  const {\n    episode\n  } = response.data;\n  return {\n    props: {\n      episode,\n      loading: response.loading,\n      error: !response.error ? null : response.error\n    }\n  };\n}\n\nconst episode = ({\n  episode,\n  loading,\n  error\n}) => {\n  const router = useRouter(); // const { data, loading, error } = useQuery(GET_EPISODE, {\n  //   variables: {id: router.query.id}\n  // });\n\n  if (loading) return __jsx(\"div\", {\n    className: \"flex items-center justify-center title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }\n  }, \"...Loading\");\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, Error.toString()); // const episode = data.episode || {};\n\n  const handleClick = e => {\n    e.preventDefault();\n    router.push('/');\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"Hero font-mono text-lg py-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: handleClick,\n    className: \"text-black hover:bg-black hover:text-white font-mono py-2 px-4 border border-black rounded m-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Home\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Episode \", router.query.id), __jsx(\"div\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, episode.name), __jsx(\"div\", {\n    className: \"flex justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, episode.air_date))), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"font-mono title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Cast\"), __jsx(\"div\", {\n    className: \"sm:flex sm:flex-col sm:justify-center sm:content-center sm:items-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, episode.characters.map(data => {\n    return __jsx(Card, {\n      heading: data.name,\n      text: data.status,\n      img: loading ? '/rickandmorty.jpg' : data.image,\n      key: data.id,\n      id: data.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    });\n  }))));\n};\n\nexport default withApollo({\n  ssr: false\n})(episode);","map":{"version":3,"sources":["/Users/mbp/WebstormProjects/tailswinds-ui/pages/episodes/[id].js"],"names":["withApollo","useQuery","React","useRouter","Card","apolloClient","ALL_CHARACTER_IDS","GET_CHARACTER","ALL_EPISODE_IDS","GET_EPISODE","getStaticPaths","ctx","client","response","query","results","data","episodes","paths","map","post","params","id","fallback","getStaticProps","variables","episode","props","loading","error","router","Error","toString","handleClick","e","preventDefault","push","name","air_date","characters","status","image","ssr"],"mappings":"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","sourcesContent":["import { withApollo } from '../../apollo/apollo.js';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Card from \"../../components/Card\";\nimport apolloClient from \"../../apolloClient\";\nimport {ALL_CHARACTER_IDS, GET_CHARACTER} from \"../../queries/characterQueries\";\nimport {ALL_EPISODE_IDS, GET_EPISODE} from \"../../queries/episodeQueries\";\n\nexport async function getStaticPaths(ctx) {\n  const client = await apolloClient(ctx)\n  const response = await client.query({\n    query: ALL_EPISODE_IDS\n  })\n\n  const { results } = response.data.episodes;\n\n  const paths = results.map(post => ({\n    params: { id: post.id },\n  }))\n\n  return { paths, fallback: false }\n}\n\nexport async function getStaticProps({ params }, ctx) {\n  const client = await apolloClient(ctx)\n  const response = await client.query({\n    query: GET_EPISODE,\n    variables: {id: `${params.id}`}\n  })\n\n  const { episode } = response.data;\n\n  return { props: {\n      episode,\n      loading: response.loading,\n      error: !response.error ? null : response.error\n    }\n  }\n}\n\nconst episode = ({ episode, loading, error }) => {\n\n  const router = useRouter();\n\n  // const { data, loading, error } = useQuery(GET_EPISODE, {\n  //   variables: {id: router.query.id}\n  // });\n\n  if (loading) return <div className=\"flex items-center justify-center title\">...Loading</div>;\n  if (error) return <div>{Error.toString()}</div>\n\n  // const episode = data.episode || {};\n\n  const handleClick = e => {\n    e.preventDefault()\n    router.push('/')\n  }\n\n  return (\n    <>\n      <div className=\"Hero font-mono text-lg py-2\">\n        <button\n          onClick={handleClick}\n          className=\"text-black hover:bg-black hover:text-white font-mono py-2\n         px-4 border border-black rounded m-2\"\n        >\n          Home\n        </button>\n        <div>\n          <div className=\"title\">\n            Episode {router.query.id}\n          </div>\n          <div className=\"title\">\n            {episode.name}\n          </div>\n          <div className=\"flex justify-center\">\n            {episode.air_date}\n          </div>\n        </div>\n      </div>\n      <hr/>\n      <div>\n        <div className=\"font-mono title\">\n          Cast\n        </div>\n        <div className=\"sm:flex sm:flex-col sm:justify-center sm:content-center\n         sm:items-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\">\n          {episode.characters.map((data) => {\n            return (\n              <Card\n                heading={data.name}\n                text={data.status}\n                img={loading ? '/rickandmorty.jpg' : data.image}\n                key={data.id}\n                id={data.id}\n              />\n            )\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default withApollo({ssr: false})(episode);"]},"metadata":{},"sourceType":"module"}