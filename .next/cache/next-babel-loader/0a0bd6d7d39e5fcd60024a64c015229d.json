{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/mbp/WebstormProjects/tailswinds-ui/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport Card from \"../components/Card\";\nimport { withApollo } from '../apollo/apollo';\nimport React, { useState } from \"react\";\nimport apolloClient from \"../apolloClient\";\nimport { ALL_CHARACTERS } from \"../queries/characterQueries\";\n\n// For GraphQL API - haven't figured out how to stream results\n// export async function getStaticProps(ctx) {\n//   const client = await apolloClient(ctx)\n//   const response = await client.query({\n//     query: ALL_CHARACTERS\n//   })\n//\n//   return {\n//     props: {\n//       characters: response.data.characters.results,\n//       loading: response.loading,\n//       error: !response.error ? null : response.error\n//     },\n//   }\n// }\nvar IndexPage = function IndexPage(_ref) {\n  _s();\n\n  var characters = _ref.characters;\n\n  var _useState = useState(characters.map(function (c) {\n    return c.name.toLowerCase();\n  })),\n      chars = _useState[0],\n      setChars = _useState[1];\n\n  var handleChange = function handleChange(e) {\n    e.preventDefault();\n  }; // if (error) return <h1 className=\"flex justify-center\">Error</h1>;\n  // if (loading) return <h1 className=\"flex items-center justify-center title\">... Loading</h1>\n\n\n  return __jsx(\"div\", {\n    className: \"bg-gray-200 h-auto w-auto\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"shadow-lg hero bg-blue-500 font-mono text-white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Rick & Morty\"), __jsx(\"h3\", {\n    className: \"flex justify-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \" with Next.js, Apollo GraphQL\"), __jsx(\"h3\", {\n    className: \"flex justify-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"and Tailwind CSS\"), __jsx(\"h3\", {\n    className: \"flex justify-center underline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    href: 'https://github.com/MuddyBootsCode/tailswinds-ui',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Git Repo here\"))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"filter\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"Search: \"), __jsx(\"input\", {\n    type: \"text\",\n    id: \"filter\",\n    value: _this.state.poetFilter,\n    onChange: _this.handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"sm:flex sm:flex-col sm:justify-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, characters.map(function (data) {\n    return __jsx(Card, {\n      heading: data.name,\n      text: data.status,\n      img: !data.image ? '/rickandmorty.jpg' : data.image,\n      key: data.id,\n      id: data.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    });\n  })));\n};\n\n_s(IndexPage, \"FE34sE0Y66DSlo01cE2Wo7Gy+8o=\");\n\n_c = IndexPage;\nexport var __N_SSG = true;\nexport default withApollo({\n  ssr: false\n})(IndexPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/mbp/WebstormProjects/tailswinds-ui/pages/index.js"],"names":["Card","withApollo","React","useState","apolloClient","ALL_CHARACTERS","IndexPage","characters","map","c","name","toLowerCase","chars","setChars","handleChange","e","preventDefault","state","poetFilter","data","status","image","id","ssr"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAoB;AAAA;;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAAA,kBAEVJ,QAAQ,CAACI,UAAU,CAACC,GAAX,CAAe,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,CAAOC,WAAP,EAAJ;AAAA,GAAhB,CAAD,CAFE;AAAA,MAE7BC,KAF6B;AAAA,MAEtBC,QAFsB;;AAIpC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,CAAC,EAAI;AACxBA,IAAAA,CAAC,CAACC,cAAF;AAGD,GAJD,CAJoC,CAUpC;AACA;;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,iDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFF,EAGE;AAAI,IAAA,SAAS,EAAC,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAI,IAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAE,iDAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CAJF,CADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,QAAtB;AACO,IAAA,KAAK,EAAE,KAAI,CAACC,KAAL,CAAWC,UADzB;AAEO,IAAA,QAAQ,EAAE,KAAI,CAACJ,YAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAXF,EAiBI;AAAK,IAAA,SAAS,EAAC,qFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,UAAU,CAACC,GAAX,CAAe,UAACW,IAAD,EAAU;AACxB,WACE,MAAC,IAAD;AACE,MAAA,OAAO,EAAEA,IAAI,CAACT,IADhB;AAEE,MAAA,IAAI,EAAES,IAAI,CAACC,MAFb;AAGE,MAAA,GAAG,EAAE,CAACD,IAAI,CAACE,KAAN,GAAc,mBAAd,GAAoCF,IAAI,CAACE,KAHhD;AAIE,MAAA,GAAG,EAAEF,IAAI,CAACG,EAJZ;AAKE,MAAA,EAAE,EAAEH,IAAI,CAACG,EALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVA,CADH,CAjBJ,CADF;AAiCD,CA9CD;;GAAMhB,S;;KAAAA,S;;AAgDN,eAAeL,UAAU,CAAC;AAAEsB,EAAAA,GAAG,EAAE;AAAP,CAAD,CAAV,CAA2BjB,SAA3B,CAAf","sourcesContent":["import Card from \"../components/Card\";\nimport { withApollo } from '../apollo/apollo';\nimport React, {useState} from \"react\";\nimport apolloClient from \"../apolloClient\";\nimport {ALL_CHARACTERS} from \"../queries/characterQueries\";\n\nexport async function getStaticProps() {\n  const ids = [...Array(591).keys()];\n  const characterUrl = `https://rickandmortyapi.com/api/character/${ids.join(\",\")}`\n\n  const res = await fetch(characterUrl);\n\n  const characters = await res.json()\n\n  return{\n    props:{\n      characters\n    }\n  }\n}\n\n// For GraphQL API - haven't figured out how to stream results\n// export async function getStaticProps(ctx) {\n//   const client = await apolloClient(ctx)\n//   const response = await client.query({\n//     query: ALL_CHARACTERS\n//   })\n//\n//   return {\n//     props: {\n//       characters: response.data.characters.results,\n//       loading: response.loading,\n//       error: !response.error ? null : response.error\n//     },\n//   }\n// }\n\nconst IndexPage = ({ characters }) => {\n  \n  const [chars, setChars] = useState(characters.map(c => c.name.toLowerCase()));\n\n  const handleChange = e => {\n    e.preventDefault()\n\n\n  }\n\n  // if (error) return <h1 className=\"flex justify-center\">Error</h1>;\n  // if (loading) return <h1 className=\"flex items-center justify-center title\">... Loading</h1>\n\n  return (\n    <div className=\"bg-gray-200 h-auto w-auto\">\n      <div className=\"shadow-lg hero bg-blue-500 font-mono text-white\">\n        <h1 className=\"title\">Rick & Morty</h1>\n        <h3 className=\"flex justify-center\"> with Next.js, Apollo GraphQL</h3>\n        <h3 className=\"flex justify-center\">and Tailwind CSS</h3>\n        <h3 className=\"flex justify-center underline\">\n          <a href={'https://github.com/MuddyBootsCode/tailswinds-ui'}>\n            Git Repo here\n          </a>\n        </h3>\n      </div>\n      <div>\n        <label htmlFor=\"filter\">Search: </label>\n        <input type=\"text\" id=\"filter\"\n               value={this.state.poetFilter}\n               onChange={this.handleChange}/>\n      </div>\n        <div className=\"sm:flex sm:flex-col sm:justify-center md:grid md:grid-cols-2 lg:grid lg:grid-cols-4\">\n          {characters.map((data) => {\n            return (\n              <Card\n                heading={data.name}\n                text={data.status}\n                img={!data.image ? '/rickandmorty.jpg' : data.image}\n                key={data.id}\n                id={data.id}\n              />\n            )\n          })}\n        </div>\n    </div>\n  )\n};\n\nexport default withApollo({ ssr: false })(IndexPage);\n"]},"metadata":{},"sourceType":"module"}