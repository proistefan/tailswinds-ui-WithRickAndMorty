{"ast":null,"code":"var _jsxFileName = \"/Users/mbp/WebstormProjects/tailswinds-ui/pages/api/folks/[id].js\";\nvar __jsx = React.createElement;\nimport { withApollo } from '../../apollo/apollo.js';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\nconst GET_CHARACTER = gql`\n    query character($id: ID!){\n        character(id: $id){\n            id\n            name\n        }\n    }\n\n`;\n\nconst person = ({\n  query: {\n    id\n  }\n}, res) => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_CHARACTER, {\n    variables: {\n      id: id\n    }\n  });\n  if (loading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 23\n    }\n  }, \"...Loading\");\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 21\n    }\n  }, Error.toString());\n  const character = data.character || {};\n  console.log(character);\n\n  if (character) {\n    return character.json();\n  } else {}\n};\n\nexport default withApollo({\n  ssr: false\n})(person);","map":{"version":3,"sources":["/Users/mbp/WebstormProjects/tailswinds-ui/pages/api/folks/[id].js"],"names":["withApollo","useQuery","React","useRouter","gql","GET_CHARACTER","person","query","id","res","data","loading","error","variables","Error","toString","character","console","log","json","ssr"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,aAAa,GAAID,GAAI;;;;;;;;CAA3B;;AAUA,MAAME,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAD,EAAoBC,GAApB,KAA4B;AAEzC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BX,QAAQ,CAACI,aAAD,EAAgB;AACvDQ,IAAAA,SAAS,EAAE;AAACL,MAAAA,EAAE,EAAEA;AAAL;AAD4C,GAAhB,CAAzC;AAKA,MAAIG,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAME,KAAK,CAACC,QAAN,EAAN,CAAP;AAEX,QAAMC,SAAS,GAAGN,IAAI,CAACM,SAAL,IAAkB,EAApC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AAEA,MAAGA,SAAH,EAAa;AACX,WAAOA,SAAS,CAACG,IAAV,EAAP;AACD,GAFD,MAGI,CAEH;AAEF,CArBD;;AAuBA,eAAenB,UAAU,CAAC;AAACoB,EAAAA,GAAG,EAAE;AAAN,CAAD,CAAV,CAAyBd,MAAzB,CAAf","sourcesContent":["import { withApollo } from '../../apollo/apollo.js';\nimport { useQuery } from '@apollo/react-hooks';\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\n\nconst GET_CHARACTER =  gql`\n    query character($id: ID!){\n        character(id: $id){\n            id\n            name\n        }\n    }\n\n`\n\nconst person = ({ query: { id } }, res) => {\n\n  const { data, loading, error } = useQuery(GET_CHARACTER, {\n    variables: {id: id}\n  });\n\n\n  if (loading) return <div>...Loading</div>;\n  if (error) return <div>{Error.toString()}</div>\n\n  const character = data.character || {};\n\n  console.log(character)\n\n  if(character){\n    return character.json();\n  }\n  else{\n    \n  }\n\n};\n\nexport default withApollo({ssr: false})(person)"]},"metadata":{},"sourceType":"module"}